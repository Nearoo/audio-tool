{"version":3,"sources":["graph/audio.js","graph/bang.js","scheduler/time.js","scheduler/scheduler.js","graph/edges.js","graph/handles.js","graph/nodeContainer.js","scheduler/sequencers.js","nodes/sequencer.js","views/nodeTypes.js","nodes/comment.js","nodes/urBang.js","nodes/sampler.js","nodes/audioOut.js","views/edgeTypes.js","views/GraphView.js","views/presets.js","views/presetBrowser.js","App.js","reportWebVitals.js","index.js"],"names":["globalAudioGraph","createUniqueId","idCounter","registerNode","node","nodeIdentifier","nodeMap","deregisterNode","id","connectNodes","id1","id2","connect","disconnectNodes","disconnect","isAudioNode","areConnected","is","this","globalBangGraph","registerOutputNode","triggererMap","Set","time","data","forEach","triggeree","triggereeMap","deregisterOutputNode","inputNode","registerInputNode","callback","deregisterInputNode","add","delete","isBangNode","TimeResolution","bpm","ppb","pulsePerSecond","secondPerPulse","Time","pulse","res","toSeconds","toPulse","subtract","multiply","factor","isBefore","isAfter","isOnOrBefore","isOnOrAfter","isNever","Number","POSITIVE_INFINITY","fromSeconds","seconds","remainder","Math","floor","fromPulse","fromBarNotation","notation","split","v","i","pulserPerPart","SchedulerTime","scheduler","getResolution","schedule","scheduleLater","scheduleDraw","mod","toString","justBefore","justAfter","fromTime","globalScheduler","lookAhead","debug","msg","console","now","isRunning","doStop","resolution","getNewEventId","lastScheduledEventId","_rescheduleDispatch","clearTimeout","dispatchTimeoutID","setTimeout","dispatch","clear","eventQueue","isEmpty","poll","stop","emit","start","peek","callbackRegister","dataRegister","_cleanUp","t","assert","unschedule","eventId","warn","removeOne","ev","replaceScheduledCallback","replaceEventData","s","Tone","FastPriorityQueue","ev1","ev2","p","b","barNot","Emitter","never","useOnGlobalSchedulerStart","useEffect","on","useOnGlobalSchedulerStop","CustomPath","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","style","d","getBezierPath","BaseHandle","props","width","height","handleKinds","audio","borderRadius","backgroundColor","bang","border","Handle","kind","parentId","updateNodeInternals","useUpdateNodeInternals","SelectedHandle","globalAllNodes","Transport","loopInterval","getUniqueEventId","eventIdCounter","tpid","isScheduled","tpEvents","tptime","gltime","glStartTime","glid","tp2glEvents","Object","keys","nextControlEventId","interval","entries","addEvent","getTpNow","removeEvent","removeAllEvents","setEventData","setEventCallback","replaceEventCallback","setLoopInterval","glnow","tpnow","startToNow","lastStartTime","StepSequencer","values","setValues","transport","callbackUnpackingIndex","setInterval","length","max","transportEventIds","TogglableBox","isToggled","toggle","isActive","margin","padding","display","onClick","nodeTypes","sequencer","useData","useBangInputHandle","useBangOutputHandles","useBangOutputHandle","noCols","noRows","Array","fill","map","bangGrid","setBangGrid","useState","stepCursor","setStepCursor","bangOutCallbacks","row","rowi","value","stepSeq","_","zip","rowI","colI","grid","col","colI_","rowI_","flipRowCol","comment","setData","data2","setData2","TextArea","autoSize","minRows","maxRows","bordered","placeholder","onChange","target","urbang","useTitle","setRunning","triggerUrBang","sampler","useAudioOutputHandle","Player","player","output","loop","setLoop","fpath","setFPath","set","playerReady","setPlayerReady","path","load","then","onPressEnter","e","defaultValue","checked","disabled","audioout","useAudioInputHandle","isOn","setOn","type","edgeTypes","selected","sourceHandleId","targetHandleId","strokeWidth","stroke","flash","setFlash","doFlash","edgeIdentifier","color","defaultGraph","position","x","y","el","GraphView","localStorageKey","componentDidMount","loadGraph","getUniqueId","state","elements","addElement","element","setState","removeElement","reject","addEdge","params","source","sourceHandle","targetHandle","findEdge","find","source_","target_","removeEdge","edge","addNode","setNode","findNode","id_","nodeOld","removeNode","onReactFlowLoad","flow","reactFlowInstance","getGraphAsReactFlowObject","nodesWithData","from","getAsReactFlowElement","nodesWithPosition","getElements","findData","n","saveGraph","localStorage","setItem","JSON","stringify","parse","getItem","clearSaved","removeItem","addNodeOfType","undefined","newNode","error","onConnectHandles","audioGraph","bangGraph","log","onElementsRemove","onEdgeRemove","onNodeRemove","onPaneClick","event","preventDefault","stopPropagation","addNodePopup","pageX","pageY","visible","onDragOver","dataTransfer","dropEffect","onDrop","nodeData","getData","project","clientX","clientY","render","Group","gutter","onLoad","onConnect","deleteKeyCode","onContextMenu","variant","gap","size","left","top","blur","autoFocus","onBlur","mapValues","Node","_idCounter","pushHandle","handle","handles","pullHandle","toAudioNodeIdentifier","handleName","toBangInputNodeIdentifier","toBangOutputNodeIdentifier","addAudioInputHandle","audioNode","removeAudioInputHandle","addAudioOutputHandle","removeAudioOutputHandle","addBangInputHandle","removeBangInputHandle","addBangOutputHandle","removeBangOutputHandle","nodeComponent","title","initialData","dataId","doClear","useDataCallsiteIdCounter","callSiteId","Function","handleNames","nodeIdentifiers","identifier","callbacks","componentWillUnmount","outerStyle","minWidth","minHeight","fontSize","boxShadow","savePresetBadge","paddingLeft","count","SaveOutlined","getPctForHandleNo","no","relOffset","maxPct","key","cursor","className","Component","presets","presetName","push","name","PresetBrowser","typeName","Panel","header","dataSource","renderItem","item","Item","draggable","onDragStart","effectAllowed","App","span","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ba27137.chunk.js","sourcesContent":["\n\nexport class AudioGraph {\n    constructor(){\n        /** Maps id -> audio node */\n        this.nodeMap = {};\n        this.idCounter = 0;\n    }\n\n    createUniqueId = () => {\n        this.idCounter += 1;\n        return this.idCounter;\n    }\n\n    registerNode = (node, nodeIdentifier) => {\n        this.nodeMap[nodeIdentifier] = node;\n    }\n\n    deregisterNode = (id) => {\n        delete this.nodeMap[id];\n    }\n\n    connectNodes = (id1, id2) => {\n        this.nodeMap[id1].connect(this.nodeMap[id2]);\n    }\n\n    disconnectNodes = (id1, id2) => {\n        this.nodeMap[id1]?.disconnect(this.nodeMap[id2]);\n    }\n\n    isAudioNode = id => {\n        return id in this.nodeMap\n    };\n\n    areConnected = (id1, id2) => {\n        return this.nodeMap[id1].is\n    }\n}\n\n\nexport const globalAudioGraph = new AudioGraph();","\n\nexport class BangGraph {\n    constructor(){\n        /** Maps id -> trigger callback */\n        this.triggereeMap = {};\n        /** Maps id -> trigeree id sets */\n        this.triggererMap = {};\n        this.idCounter = 0;\n    }\n\n    createUniqueId = () => {\n        this.idCounter += 1;\n        return this.idCounter;\n    }\n\n    registerOutputNode = (nodeIdentifier) => {\n        if(!(nodeIdentifier in this.triggererMap)){\n            this.triggererMap[nodeIdentifier] = new Set();\n        }\n        const callback = (time, data) => this.triggererMap[nodeIdentifier].forEach(\n            triggeree => this.triggereeMap[triggeree](time, data)\n        );\n        return callback;\n    }\n\n    deregisterOutputNode = nodeIdentifier => {\n        this.triggererMap[nodeIdentifier].forEach(inputNode =>\n            this.disconnectNodes(nodeIdentifier, inputNode));\n        delete this.triggererMap[nodeIdentifier];\n    }\n\n    registerInputNode = (nodeIdentifier, callback) => {\n        const id = nodeIdentifier;\n        this.triggereeMap[id] = callback;\n    }\n\n    deregisterInputNode = (id) => {\n        delete this.triggereeMap[id];\n    }\n\n    connectNodes = (id1, id2) => {\n        this.triggererMap[id1].add(id2);\n    }\n\n    disconnectNodes = (id1, id2) => {\n        this.triggererMap[id1]?.delete(id2);\n    }\n\n    isBangNode = id => {\n        return id in this.triggereeMap || id in this.triggererMap;\n    };\n}\n\n\nexport const globalBangGraph = new BangGraph();","/**\n * Stores the \"time resolution\" in terms of pulses per second.\n * Stored in two fields:\n * * bpm: beats per minute\n * * ppb: pulses per beat\n */\nexport class TimeResolution{\n    constructor(bpm, ppb){\n        this.bpm = bpm;\n        this.ppb = ppb;\n\n        this.pulsePerSecond = ppb*bpm/60;\n        this.secondPerPulse = 1/this.pulsePerSecond;\n    }\n}\n\n/** \n * Utility class to convert to & from different time formats,\n * as well as comibining and comparing different times.\n * \n * All combination and comparison operations assume the same TimeResultion.\n * \n * Stores time in terms of pulses, hence requires TimeResolution as an argument.\n*/\nexport class Time {\n    constructor(pulse, res){\n        this.pulse = pulse;\n        this.res = res;\n    }\n\n    static fromSeconds = (seconds, res) => {\n        const remainder = seconds % res.secondPerPulse;\n        const pulse = Math.floor(seconds * res.pulsePerSecond) + (remainder ? 1 : 0)\n        return new Time(pulse, res);\n    }\n\n    toSeconds = () => {\n        return this.pulse/this.res.pulsePerSecond;\n    }\n\n    static fromPulse = (pulse, res) => {\n        return new Time(pulse, res);\n    }\n\n    toPulse = () => {\n        return this.pulse;\n    }\n\n    static fromBarNotation = (notation, res) => {\n        let pulse = 0;\n        notation.split(\":\").forEach((v, i) =>{\n            const pulserPerPart = Math.floor(res.ppb*4/(1<<(i*2)));\n            pulse += Number(v)*pulserPerPart;\n        });\n        return new Time(pulse, res);\n    }\n\n    add = time => {\n        return new Time(this.pulse + time.pulse, this.res);\n    }\n\n    subtract = time => {\n        return new Time(this.pulse - time.pulse, this.res);\n    }\n\n    multiply = factor => {\n        return new Time(this.pulse * factor, this.res);\n    }\n\n    isBefore = time => {\n        return this.toSeconds() < time.toSeconds();\n    }\n\n    isAfter = time => {\n        return this.toSeconds() > time.toSeconds();\n    }\n\n        \n    isOnOrBefore = time => {\n        return !this.isAfter(time);\n    }\n\n    isOnOrAfter = time => {\n        return !this.isBefore(time);\n    }\n\n    isNever = () => {\n        return this.pulse === Number.POSITIVE_INFINITY;\n    }\n}\n\n/**\n * Takes a scheduler instead of a TimeResolution as an argument,\n * from which time resolution is then taken.\n * \n * Also allows scheduling of events on the scheduler for a schduler-time t using\n * * t.schedule(callback, data); and\n * * t.schedulerLater(callback, data, deltaTime);\n */\nexport class SchedulerTime extends Time {\n    constructor(pulse, scheduler){\n        super(pulse, scheduler.getResolution());\n        this.scheduler = scheduler;\n    }\n\n    static fromTime = (time, scheduler) => {\n        return new SchedulerTime(time.toPulse(), scheduler);\n    }\n\n    static fromSeconds = (seconds, scheduler) => {\n        const time = Time.fromSeconds(seconds, scheduler.getResolution());\n        return SchedulerTime.fromTime(time, scheduler);\n    }\n\n    static fromBarNotation = (notation, scheduler) => {\n        const time = Time.fromBarNotation(notation, scheduler.getResolution());\n        return SchedulerTime.fromTime(time, scheduler);\n    }\n\n    static fromPulse = (pulse, scheduler) =>{\n        const time = Time.fromPulse(pulse, scheduler.getResolution());\n        return SchedulerTime.fromTime(time, scheduler);\n    }\n\n    schedule = (callback, data) => {\n        return this.scheduler.schedule(callback, this, data);\n    }\n\n    scheduleLater = (callback, time, data) => {\n        return this.add(time).schedule(callback, data);\n    }\n\n    scheduleDraw = callback => {\n        this.scheduler.scheduleDraw(callback, this);\n    }\n\n    // To-Do: Implement s.t. we don't need to rewrite add & multiply\n    add = time => {\n        return new SchedulerTime(this.pulse + time.pulse, this.scheduler);\n    }\n\n    multiply = factor => {\n        return new SchedulerTime(this.pulse * factor, this.scheduler);\n    }\n\n    subtract = time => {\n        return new SchedulerTime(this.pulse - time.pulse, this.scheduler);\n    }\n\n    mod = time => {\n        return new SchedulerTime(this.pulse % time.pulse, this.scheduler);\n    }\n\n    toString = () => {\n        if(this.pulse === Number.POSITIVE_INFINITY)\n            return \"time(Infinity)\";\n        else\n            return `time(pulse=${this.pulse})`;\n    }\n\n    justBefore = () => {\n        return new SchedulerTime(this.pulse-1, this.scheduler);\n    }\n\n    justAfter = () => {\n        return new SchedulerTime(this.pulse+1, this.scheduler);\n    }\n\n}","\nimport FastPriorityQueue from 'fastpriorityqueue';\nimport { useEffect } from 'react';\nimport * as Tone from 'tone';\nimport { Emitter } from 'tone';\nimport { assert } from 'tone/build/esm/core/util/Debug';\nimport { SchedulerTime, TimeResolution, Time } from './time';\n\n\nexport class PreciseScheduler extends Emitter{\n    constructor({\n        ppb = 64, // pulse per beat, i.e. time resolution\n        bpm = 120, // beats per minute, i.e. speed\n        lookAhead = 12, // ms to schedule in advance\n    }={} ){\n        super();\n        // Event: {time, id}\n        this.eventQueue = new FastPriorityQueue((ev1, ev2) => ev1.time.isBefore(ev2.time));\n        this.resolution = new TimeResolution(bpm, ppb);\n        this.dispatchTimeoutID = null;\n\n        this.p = pulse => SchedulerTime.fromPulse(pulse, this)\n        this.s = seconds => SchedulerTime.fromSeconds(seconds, this)\n        this.b = barNot => SchedulerTime.fromBarNotation(barNot, this)\n\n        // {id: callback}\n        this.callbackRegister = {}\n        // {id: data}\n        this.dataRegister = {}\n        // counter to get unique event ids\n        this.lastScheduledEventId = 0\n\n        this.doStop = false;\n\n        this.lookAhead = this.s(lookAhead*0.001);\n    }\n\n    debug = msg => {\n        console.debug(`[Scheduler]{${this.now().toPulse()}}: `, msg);\n    }\n\n    isRunning = () => {\n        return !this.doStop;\n    }\n\n    getResolution = () => this.resolution;\n\n    getNewEventId = () => {\n        this.lastScheduledEventId += 1;\n        return this.lastScheduledEventId;\n    }\n\n    _rescheduleDispatch = () => {\n        clearTimeout(this.dispatchTimeoutID);\n        if(!this.doStop)\n            this.dispatchTimeoutID = setTimeout(this.dispatch, this.lookAhead.toSeconds()/2);\n        else\n            this.dispatchTimeoutID = null;\n    }\n\n    clear = () =>{\n        while(!this.eventQueue.isEmpty()) this.eventQueue.poll();\n    }\n\n    stop = () => {\n        this.doStop = true;\n        this.clear();\n        this.emit(\"stop\");\n    }\n\n    start = () => {\n        this.doStop = false;\n        this.emit(\"start\");\n        this.dispatch();\n    }\n\n    dispatch = () =>{\n        while(\n            !this.doStop &&\n            !this.eventQueue.isEmpty() && \n            this.eventQueue.peek().time.isBefore(this.now().add(this.lookAhead))\n            ){\n                const {time, id} = this.eventQueue.poll();\n                const callback = this.callbackRegister[id];\n                const data = this.dataRegister[id];\n\n                this.debug(`Dispatching event with id ${id} scheduled for pulse [${time}]`)\n                callback(time, data);\n                this._cleanUp(id);\n        }\n        this._rescheduleDispatch();\n    }\n\n    schedule = (callback, t, data) =>{\n        assert(t instanceof Time, \"Scheduling time must be Time object.\");\n        const id = this.getNewEventId();\n        this.eventQueue.add({time: t, id});\n        this.callbackRegister[id] = callback;\n        this.dataRegister[id] = data;\n        this.debug(`Scheduled event with id ${id} for pulse  [${t.toPulse()}]`)\n        return id;\n    }\n\n    unschedule = eventId => {\n        this.debug(`Unscheduled event ${eventId}`);\n        if(!(eventId) in this.callbackRegister)\n            console.warn(\"Removed inexistant event with id \", eventId);\n        this.eventQueue.removeOne(ev => ev.id === eventId);\n        this._cleanUp(eventId);\n    }\n\n    /* Removes all data associated with the eventId. Doesn't touch eventQueue. */\n    _cleanUp = eventId => {\n        delete this.callbackRegister[eventId];\n        delete this.dataRegister[eventId];\n    }\n\n    replaceScheduledCallback = (id, callback) => {\n        assert(id in this.callbackRegister, \"Tried replacing data of inexistant event\");\n        this.callbackRegister[id] = callback;\n    }\n\n    replaceEventData = (id, data) => {\n        assert(id in this.dataRegister, \"Tried replacing data of inexistant event\");\n        this.dataRegister[id] = data;\n    }\n\n    now = () => {\n        return this.s(Tone.getContext().now());\n    }\n\n    scheduleDraw = (callback, time) => {\n        Tone.Draw.schedule(callback, time.toSeconds());\n    }\n\n}\n\nexport const globalScheduler = new PreciseScheduler();\n\nexport const {b, s, p} = globalScheduler;\nexport const never = s(Number.POSITIVE_INFINITY);\n\nexport const useOnGlobalSchedulerStart = callback => {\n    useEffect(() => globalScheduler.on(\"start\", callback), []);\n}\n\nexport const useOnGlobalSchedulerStop = callback => {\n    useEffect(() => globalScheduler.on(\"stop\", callback), []);\n}","import { useEffect, useState } from 'react';\nimport { getBezierPath } from 'react-flow-renderer';\nimport { globalScheduler } from '../scheduler/scheduler';\nimport { globalAudioGraph } from './audio';\nimport { globalBangGraph } from './bang';\n\n\nconst CustomPath = ({sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, style, id}) => {\n    const d = getBezierPath({sourceX, sourceY, sourcePosition, targetX, targetY, targetPosition});\n    return <path {...{d, style, id}} />\n}\n\nexport const AudioEdge = ({selected, ...props}) => {\n    useEffect(() => {globalAudioGraph.connectNodes(props.sourceHandleId, props.targetHandleId);\n        return () => globalAudioGraph.disconnectNodes(props.sourceHandleId, props.targetHandleId)}, []);\n    return <CustomPath {...props} style={{strokeWidth: 3, fill: \"none\", stroke: selected ? \"#555\" : \"#cccc\"}} />\n    }\n\n\nexport const BangEdge = ({selected, ...props}) => {\n    // Connect input & output\n    useEffect(() => {globalBangGraph.connectNodes(props.sourceHandleId, props.targetHandleId);\n            return () => globalBangGraph.disconnectNodes(props.sourceHandleId, props.targetHandleId)}, []);\n\n    // make edge flash on bang\n    const [flash, setFlash] = useState(false);\n    const doFlash = (time) => globalScheduler.scheduleDraw(() => {setFlash(true); setTimeout(() => setFlash(false), 100)}, time);\n    const edgeIdentifier = `edge(${props.sourceHandleId}-${props.targetHandleId})`;\n    useEffect(() => {globalBangGraph.registerInputNode(edgeIdentifier, doFlash);\n        return () => globalBangGraph.deregisterInputNode(edgeIdentifier)}, []);\n    useEffect(() => {globalBangGraph.connectNodes(props.sourceHandleId, edgeIdentifier);\n        return () => globalBangGraph.disconnectNodes(props.sourceHandleId, edgeIdentifier)}, [])\n    const color = flash ? \"orange\" : (selected ? \"#555\" : \"#ccc\");\n    \n    return <CustomPath {...props} style={{strokeWidth: 3, fill: \"none\", stroke: color}} />\n}","import { Component, useEffect } from 'react';\nimport { Handle as FlowHandle, useUpdateNodeInternals, updateNo } from 'react-flow-renderer';\n\nconst BaseHandle = props =>{\n    return <FlowHandle {...props} style={{...props.style, width: 15, height: 15, ...props.style}} />\n}\n    \nconst AudioHandle = (props) => \n    <BaseHandle {...props} style={{borderRadius: \"100%\", backgroundColor: \"orange\"}} />\n\nconst BangHandle = (props) => \n    <BaseHandle {...props} style={{borderRadius: 0, backgroundColor: \"grey\", border: 0, ...props.style}} />\n\nconst handleKinds = {\n    audio: AudioHandle,\n    bang: BangHandle\n}\n\n/** Returns a handle from handleKinds according to \"kind\" prop. Pass parentId if handle is created dynamically. */\nexport const Handle = ({kind, parentId, ...props}) => {\n\n    // Required to make react-flow update internal state on dynamic handle creation\n    const updateNodeInternals = useUpdateNodeInternals();\n    useEffect(() => updateNodeInternals(parentId), []);\n\n    if(!(kind in handleKinds)){\n        throw `Unknown handle kind ${kind}`\n    } else {\n        const SelectedHandle = handleKinds[kind];\n        return <SelectedHandle {...props} />\n    }\n}\n\n","import { Badge, Card } from 'antd';\nimport { Component, createRef, useEffect, useState } from 'react';\nimport _ from 'lodash';\nimport { Handle } from './handles';\nimport { globalAudioGraph } from './audio';\nimport { globalBangGraph } from './bang';\nimport { thisExpression } from '@babel/types';\nimport { SaveOutlined } from '@ant-design/icons';\n/** Contains the instances of all nodes, globally */\nconst globalAllNodes = new Set();\n/** Returns list of all nodes as react-flow elements */\nexport const getAllNodesAsReactFlowElements = () => Array.from(globalAllNodes).map(node => node.getAsReactFlowElement());\n\n/** Returns the node wrapped in the standard node container, with borders, handles, hooks, etc. */\nexport const insideNodeContainer = (Node) => {\n    return class extends Component {\n        constructor(props){\n            super(props);\n            this.id = props.id;\n            this.type = props.type;\n            this.state = {\n                title: \"\",\n                handles: [],\n            }\n            \n            // Used to assign unique ids to every useData callsite\n            this.useDataCallsiteIdCounter = 0;\n            // this.data[callsiteId] = data for that useData at callsite callsiteId\n            this.data = this.props.data ?? {};\n        }\n\n        createUniqueId = () => {\n            this._idCounter = (this._idCounter ?? -1) + 1;\n            return this._idCounter;\n        }\n\n        pushHandle = (id, kind, type, position) => {\n            const handle = {id, kind, type, position};\n            this.setState(state => ({handles: [...state.handles, handle]}));\n        }\n\n        pullHandle = id => {\n            this.setState(state => ({handles: _.reject(state.handles, {id})}));\n        }\n\n        getData = () => {\n            return this.data;\n        }\n\n        toAudioNodeIdentifier = handleName =>\n            `audioNode(${this.id}//${handleName})`;\n        \n        toBangInputNodeIdentifier = handleName => \n            `bangInputNode(${this.id}//${handleName})`;\n        \n        toBangOutputNodeIdentifier = handleName => \n            `bangOutputNode(${this.id}//${handleName})`\n\n        addAudioInputHandle = (audioNode, handleName, position=\"top\") => {\n            const nodeIdentifier = this.toAudioNodeIdentifier(handleName);\n            globalAudioGraph.registerNode(audioNode, nodeIdentifier);\n            this.pushHandle(nodeIdentifier, \"audio\", \"target\", position);\n            return nodeIdentifier;\n        }\n\n        removeAudioInputHandle = handleName => {\n            const nodeIdentifier = this.toAudioNodeIdentifier(handleName);\n            globalAudioGraph.deregisterNode(nodeIdentifier);\n            this.pullHandle(nodeIdentifier);\n        }\n\n        addAudioOutputHandle = (audioNode, handleName, position=\"bottom\" ) => {\n            const nodeIdentifier = this.toAudioNodeIdentifier(handleName);\n            globalAudioGraph.registerNode(audioNode, nodeIdentifier);\n            this.pushHandle(nodeIdentifier, \"audio\", \"source\", position);\n            return nodeIdentifier;\n        }\n\n        removeAudioOutputHandle = handleName => {\n            const nodeIdentifier = this.toAudioNodeIdentifier(handleName);\n            globalAudioGraph.deregisterNode(nodeIdentifier);\n            this.pullHandle(nodeIdentifier);\n        }\n\n        addBangInputHandle = (callback, handleName, position=\"left\") => {\n            const nodeIdentifier = this.toBangInputNodeIdentifier(handleName);\n            globalBangGraph.registerInputNode(nodeIdentifier, callback);\n            this.pushHandle(nodeIdentifier, \"bang\", \"target\", position);\n            return nodeIdentifier;\n        }\n\n        removeBangInputHandle = handleName => {\n            const nodeIdentifier = this.toBangInputNodeIdentifier(handleName);\n            globalBangGraph.deregisterInputNode(nodeIdentifier);\n            this.pullHandle(nodeIdentifier);\n        }\n\n        addBangOutputHandle = (handleName, position=\"right\") => {\n            const nodeIdentifier = this.toBangOutputNodeIdentifier(handleName);\n            const callback = globalBangGraph.registerOutputNode(nodeIdentifier);\n            this.pushHandle(nodeIdentifier, \"bang\", \"source\", position);\n            return [nodeIdentifier, callback];\n        }\n\n        removeBangOutputHandle = handleName => {\n            const nodeIdentifier = this.toBangInputNodeIdentifier(handleName);\n            globalBangGraph.deregisterOutputNode(nodeIdentifier);\n            this.pullHandle(nodeIdentifier);\n        }\n\n        componentDidMount = () => {\n            globalAllNodes.add(this);\n            this.nodeComponent = <Node \n                useTitle={title => useEffect(() => this.setState({title}), [title])}\n                useData={(initialData, dataId, doClear) => {\n                    // Returns an unique id for every callsite (not starting at 0, but unique anyway).\n                    const [callSiteId] = useState(() => (dataId === undefined) ? this.useDataCallsiteIdCounter++ : dataId);\n\n                    // state = the saved data, if it exists, or the initial data\n                    const [state, setState] = useState(() => {\n                        const alreadyStored = callSiteId in (this.props.data ?? {}) && !doClear;\n                        return alreadyStored ? this.props.data[callSiteId] : initialData;\n                    });\n\n                    // Set this.data the first time\n                    useEffect(() => {this.data[callSiteId] = state}, []);\n\n                    // setData performs both this.data = data and setState(data)\n                    const setData = data => {\n                        // Set this.data\n                        if(data instanceof Function){\n                            this.data[callSiteId] = data(this.data[callSiteId]);\n                        } else {\n                            this.data[callSiteId] = data;\n                        }\n                        setState(data);\n                    }\n\n                    return [state, setData];\n                }}\n\n                useAudioInputHandle={\n                    (audioNode, handleName, position) => {\n                        useEffect(() => {this.addAudioInputHandle(audioNode, handleName, position);\n                            return () => this.removeAudioInputHandle(handleName)}, []);\n                    }\n                }\n\n                useAudioOutputHandle={\n                    (audioNode, handleName, position) => {\n                        useEffect(() => {this.addAudioOutputHandle(audioNode, handleName, position);\n                            return () => {this.removeAudioOutputHandle(handleName)}}, []);\n                    }\n                }\n\n                useBangInputHandle={\n                    (callback, handleName, position) => {\n                        useEffect(() => {this.addBangInputHandle(callback, handleName, position);\n                            return () => {this.removeBangInputHandle(handleName)}}, []);\n                    }\n                }\n\n                useBangOutputHandle={\n                    (handleName, position=\"right\") => {\n                        const [nodeIdentifier] = useState(() => this.toBangOutputNodeIdentifier(handleName));\n                        const [callback] = useState(() => globalBangGraph.registerOutputNode(nodeIdentifier));\n                        useEffect(() => {this.pushHandle(nodeIdentifier, \"bang\", \"source\", position);\n                            return () => globalBangGraph.deregisterOutputNode(nodeIdentifier)}, []);\n                        return callback;\n                    }\n                }\n\n                useBangOutputHandles={\n                    (handleNames, position=\"right\") => {\n                        const [nodeIdentifiers] = useState(() => handleNames.map(handleName => this.toBangOutputNodeIdentifier(handleName)));\n                        const [callbacks] = useState(() => nodeIdentifiers.map(identifier => globalBangGraph.registerOutputNode(identifier)));\n                        useEffect(() => {nodeIdentifiers.map(nodeIdentifier => this.pushHandle(nodeIdentifier, \"bang\", \"source\", position));\n                            return () => {\n                                nodeIdentifiers.map(nodeIdentifier => globalBangGraph.deregisterOutputNode(nodeIdentifier));\n                                nodeIdentifiers.map(nodeIdentifier => this.pullHandle(nodeIdentifier))}}, handleNames);\n                        return callbacks;\n                    }\n                }\n                />\n        }\n\n        componentWillUnmount = () => {\n           globalAllNodes.delete(this);\n        }\n\n        getAsReactFlowElement = () => {\n            return {\n                data: this.getData(),\n                id: this.id,\n                type: this.type\n            };\n        }\n\n        render(){\n            const outerStyle = {\n                border: `1px solid ${this.props.selected ? \"black\" : \"lightgrey\"}`,\n                minWidth: \"30px\",\n                minHeight: \"30px\",\n                fontSize: \"smaller\",\n                borderRadius: \"2px\",\n                boxShadow: \"0px 0px 1px lightgrey\",\n                backgroundColor: \"white\",\n                margin: \"4px\"\n            }\n\n            const titleStyle = {\n                backgroundColor: \"rgb(235, 235, 235)\",\n                fontSize: \"x-small\",\n                padding: \"2px\",\n                paddingLeft: \"6px\",\n                minHeight: \"7px\"\n            }\n\n            const contentStyle = {\n                padding: \"3px\",\n                cursor: \"pointer\"\n            }\n\n            const savePresetBadge = <span style={{paddingLeft: 5}}><Badge count={<SaveOutlined />} onClick={() => console.log(this.data)}/></span>\n\n            const getPctForHandleNo = no => {\n                const minPct = 20;\n                const maxPct = 100;\n                const offset = maxPct - minPct;\n                const relOffset = offset / (this.state.handles.length-1);\n                const pct = minPct + relOffset*no;\n                return `${pct}%`;\n            }\n            return <div style={outerStyle} key={this.id}>\n                {this.state.handles.map((props, i) => <Handle {...props} key={props.id} parentId={this.id} style={{top: getPctForHandleNo(i)}} />)}\n                <div style={titleStyle}>{this.state.title}{savePresetBadge}</div>\n                <div style={contentStyle} className=\"nodrag\">{this.nodeComponent}</div>\n            </div>\n        }\n    }\n}","import { globalScheduler, never, p, s } from \"./scheduler\";\nimport { TimeResolution } from \"./time\";\nimport FastPriorityQueue from \"fastpriorityqueue\";\nimport { TransportTime } from \"tone\";\nimport { TickSignal } from \"tone/build/esm/core/clock/TickSignal\";\nimport { theWindow } from \"tone/build/esm/core/context/AudioContext\";\nimport { assert } from \"tone/build/esm/core/util/Debug\";\n\n\n/**\n * Transport can be used to have a \"fixed\" timeline with events that are kept even if the\n * global scheduler is stopped.\n * \n * It can be started or stopped. Note that start & stop do NOT behave as though they were on the \n * timeline; instead, they're \"ephemeral\". Stop immediately clears all events after the provided time;\n * \"start\" immediately clears & schedules all events.\n * \n * If start / stop need to behave as though they were on a timleine, they need to be put on\n * a separate, different transport that schedules them.\n * \n * It can be looped by a \"loopInterval\", which will schedule a new \"start\" event ever interval time.\n * \n * It's analogous to a MIDI file which can be scheduled to start & stop. at any point on the global scheduler\n * (only that data associated with every MIDI event is arbitrary).\n * \n * TODO: * Add ability to play back with \"offset\".\n * TODO: * Make events scheduled beyond interval not be triggered\n */\nexport class Transport {\n    constructor(\n        loopInterval,\n    ){\n        this.tpEvents = {} // {tpid: {callback, tptime, data}}\n        this.tp2glEvents = {} // {tpid: {glid, gltime}}\n\n        this.interval = loopInterval ?? never;\n        // Keeps id of next control event, so it can be unscheduled if needed.\n        this.nextControlEventId = null;\n        this.glStartTime = never;\n\n        globalScheduler.on(\"stop\", () => this.stop(s(0)));\n    }\n    getUniqueEventId = () => {\n        this.eventIdCounter = (this.eventIdCounter ?? 0) + 1;\n        return this.eventIdCounter;\n    }\n\n\n    schedule = (tpid) => {\n        assert(!(this.isScheduled(tpid)), \"Tried scheduling already schedueld event\");\n        // Calculate global time\n        const {tptime, callback, data} = this.tpEvents[tpid];\n        const gltime = tptime.add(this.glStartTime);\n        // Create callback that also deregisters this event\n        const deregisterAndCall = (time, data) => {\n            delete this.tp2glEvents[tpid];\n            callback(time, data);\n        }\n        const glid = gltime.schedule(deregisterAndCall, data);\n        // Register this event\n        this.tp2glEvents[tpid] = {glid, gltime};\n    }\n\n    start = time => {\n        this.glStartTime = time;\n        // Reschedule all events\n        Object.keys(this.tpEvents).forEach(tpid => {\n            if(this.isScheduled(tpid))\n                this.unschedule(tpid);\n            this.schedule(tpid);\n        });\n        \n        // Unschedule other control event\n        if(this.nextControlEventId)\n            globalScheduler.unschedule(this.nextControlEventId);\n\n        // Schedule start if interval < infinity\n        if(this.interval.isBefore(never))\n            this.nextControlEventId = time.add(this.interval).schedule(this.start);\n    }\n\n    stop = time => {\n        // Unschedule next control event\n        if(this.nextControlEventId)\n            globalScheduler.unschedule(this.nextControlEventId);\n\n        // Unschedule all events after stop event\n        Object.entries(this.tp2glEvents).forEach(([tpid, {gltime}]) => {\n            if(gltime.isAfter(time) && this.isScheduled(tpid)){\n                this.unschedule(tpid)\n            }\n        });\n    }\n\n    isRunning = () => {\n        return this.glStartTime.isBefore(globalScheduler.now());\n    }\n\n    isScheduled = tpid => {\n        return tpid in this.tp2glEvents;\n    }\n\n    addEvent = (tptime, callback, data) => {\n        const tpid = this.getUniqueEventId();\n        this.tpEvents[tpid] = {callback, data, tptime};\n        // Check if transport is currently running & event hasn't yet passed\n        if(this.isRunning() && this.getTpNow().isOnOrBefore(tptime)){\n            // If so, then schedule this event.\n            this.schedule(tpid);\n        }\n    }\n\n    removeEvent = tpid => {\n        if(this.isScheduled(tpid)){\n            this.unschedule(tpid);\n        }\n        delete this.tpEvents[tpid];\n    }\n\n    removeAllEvents = () => {\n        Object.keys(this.tpEvents).forEach(tpid => this.removeEvent(tpid));\n    }\n\n    setEventData = (tpid, data) => {\n        if(this.isScheduled(tpid)){\n            const {glid} = this.tp2glEvents[tpid];\n            globalScheduler.replaceEventData(glid, data);\n        }\n\n        this.tpEvents[tpid] = {...this.tpEvents[tpid], data};\n    }\n\n    setEventCallback = (tpid, callback) => {\n        if(this.isScheduled(tpid)){\n            const {glid} = this.tp2glEvents[tpid];\n            globalScheduler.replaceEventCallback(glid, callback);\n        }\n\n        this.tpEvents[tpid] = {...this.tpEvents[tpid], callback};\n    }\n\n    setLoopInterval = interval => {\n        this.interval = interval;\n        // Remove next control event (assumed to be \"start\") // TODO\n        if(this.nextControlEventId){\n            globalScheduler.unschedule(this.nextControlEventId);\n        }\n\n        // If the loop interval is finite and we're running\n        if(this.interval.isBefore(never) && this.isRunning()){\n            const glnow = globalScheduler.now();\n            const tpnow = this.getTpNow(glnow);\n            // Set glStartTime to last start before current transport cursor\n            const startToNow = glnow.subtract(this.glStartTime);\n            const lastStartTime = glnow.subtract(startToNow.mod(interval));\n            this.glStartTime = lastStartTime;\n            // Reschedule all events\n            Object.keys(this.tp2glEvents).forEach(tpid => this.unschedule(tpid));\n            Object.entries(this.tpEvents).forEach(([tpid, {tptime}]) => {\n                if(tptime.isOnOrAfter(tpnow))\n                    this.schedule(tpid);\n            })\n            // Schedule next start\n            this.nextControlEventId = lastStartTime.add(interval).schedule(this.start);\n        }\n    }\n\n    getTpNow = (glnow=globalScheduler.now()) => {\n        return glnow.subtract(this.glStartTime);\n    }\n    \n    unschedule = tpid => {\n        const {glid} = this.tp2glEvents[tpid];\n        globalScheduler.unschedule(glid);\n        delete this.tp2glEvents[tpid];\n    }\n\n\n}\n\nexport class StepSequencer{\n    constructor(callback, interval, values=[]){\n        this.callback = callback;\n        this.interval = interval;\n\n        this.transport = new Transport(interval.multiply(Math.max(values.length, 1)));\n        this.transportEventIds = [];\n        this.transport.setLoopInterval(interval);\n    }\n\n    debug = msg => {\n        console.debug(`[StepSequencer]{${globalScheduler.now().toPulse()}} ${msg}`);\n    }\n\n    setValues = values => {\n        this.debug(\"Set new values\");\n        this.values = values;\n        this.transport.removeAllEvents();\n        \n        const callbackUnpackingIndex = (time, {v, i}) => this.callback(time, v, i);\n        this.values.forEach((v, i) => \n            this.transport.addEvent(this.interval.multiply(i), callbackUnpackingIndex, {v, i})\n        );\n        this.setInterval(this.interval);\n    }\n\n    setInterval = interval => {\n        this.interval = interval;\n        this.transport.setLoopInterval(this.interval.multiply(this.values.length));\n    }\n\n    start = time => this.transport.start(time);\n    stop = time => this.transport.stop(time);\n}","import { useCallback, useEffect, useState } from \"react\";\nimport { TickSignal } from \"tone/build/esm/core/clock/TickSignal\";\nimport { b, globalScheduler, useOnGlobalSchedulerStop } from '../scheduler/scheduler';\nimport { StepSequencer, Transport } from \"../scheduler/sequencers\";\nimport _ from 'lodash';\n\nconst TogglableBox = ({isToggled, toggle, isActive}) =>\n    <div style={{\n        width: 20,\n        height: 20,\n        border: `4px solid ${isActive ? \"orange\" : \"transparent\"}`,\n        backgroundColor: isToggled ? \"#555\"  : \"#bbb\",\n        margin: 2,\n        padding: 0,\n        display: \"inline-block\",\n        borderRadius: \"1px\"\n    }} \n    onClick={toggle}/>\n\n\n\nexport const Sequencer = ({useData, useBangInputHandle, useBangOutputHandle, useBangOutputHandles}) => {\n\n    const [noCols, setNoCols] = useData(16, \"no-cols\");\n    const [noRows, setNoRows] = useData(4, \"no-rows\");\n    // bangGrid[col][row]\n    const [bangGrid, setBangGrid] = useData(\n        Array(noCols).fill().map(() => Array(noRows).fill(false)), \"bang-grid\", true\n    )\n\n    const flipRowCol = (rowI, colI) =>\n        setBangGrid(grid => grid.map((col, colI_) => colI_ !== colI ? col : col.map((row, rowI_) => rowI_ !== rowI ? row : !row))); \n    const [stepCursor, setStepCursor] = useState(-1);\n    const bangOutCallbacks = useBangOutputHandles(bangGrid[0].map((row, rowi) => `bang-out-${rowi}`));\n\n    const [stepSeq] = useState(() => new StepSequencer((time, v, i) =>{\n        v.map((value, row) => {\n            if(value)\n                bangOutCallbacks[row](time);\n        });\n        time.scheduleDraw(() => setStepCursor(i));\n    }, b(\"0:0:1\")));\n\n    useBangInputHandle((time) => stepSeq.start(time), \"sequencer-start\");\n    useEffect(() => stepSeq.setValues(bangGrid), [bangGrid]);\n\n    useOnGlobalSchedulerStop(() => setStepCursor(-1));\n    const bangGridT = _.zip(...bangGrid);\n    return bangGridT.map((row, rowI) =>\n                        <div key={rowI}>\n                            {row.map((value, colI) =>\n                                <TogglableBox isToggled={value} toggle={() => flipRowCol(rowI, colI)} key={colI} isActive={stepCursor===colI}/>\n                                )}\n                        </div>)\n\n}","import { AudioOut } from '../nodes/audioOut';\nimport { Comment } from '../nodes/comment';\nimport { Sampler } from '../nodes/sampler';\nimport { Sequencer } from '../nodes/sequencer';\nimport { UrBang } from '../nodes/urBang';\n\n\nexport const nodeTypes = {\n    sequencer: Sequencer,\n    comment: Comment,\n    urbang: UrBang,\n    sampler: Sampler,\n    audioout: AudioOut,\n}\n","import { Input } from 'antd';\n\nexport const Comment = ({useData}) => {\n    const [data, setData] = useData(\"Hello\");\n    const [data2, setData2] = useData(\"There\");\n    return <><Input.TextArea\n            autoSize={{minRows: 1, maxRows: 5}}\n            bordered={false}\n            value={data}\n            placeholder={\"Add comment...\"}\n            onChange={v => setData(v.target.value)} />\n            <Input.TextArea\n            autoSize={{minRows: 1, maxRows: 5}}\n            bordered={false}\n            value={data2}\n            placeholder={\"Add comment...\"}\n            onChange={v => setData2(v.target.value)} /></>;\n}","import { Button } from \"antd\";\nimport { useState } from \"react\";\nimport { globalScheduler, s, useOnGlobalSchedulerStart, useOnGlobalSchedulerStop } from \"../scheduler/scheduler\";\n\n\nexport const UrBang = ({useTitle, useBangOutputHandle}) => {\n    useTitle();\n\n    // Use isRunning state following global scheduler state\n    const [isRunning, setRunning] = useState(false);\n    useOnGlobalSchedulerStart(() => setRunning(true));\n    useOnGlobalSchedulerStop(() => setRunning(false));\n    \n    // Setup urBang handle\n    const triggerUrBang = useBangOutputHandle(\"urbang-out\");\n    useOnGlobalSchedulerStart(() => globalScheduler.now().add(s(0.1)).schedule(triggerUrBang));\n\n    // Return start / stop button depending on global scheduler state\n    return isRunning ? \n            <Button onClick={() => globalScheduler.stop()}>🟦</Button> :\n            <Button onClick={() => globalScheduler.start()}>💥</Button>;\n}\n","import { useEffect, useImperativeHandle, useState } from 'react'\nimport { Player } from 'tone';\nimport { Button, Checkbox, Col, Input, Row } from \"antd\";\nimport { useOnGlobalSchedulerStop } from '../scheduler/scheduler';\n\nexport const Sampler = ({useTitle, useAudioOutputHandle, useBangInputHandle, useData}) => {\n    useTitle(\"Sampler\");\n    const [player] = useState(() => new Player());\n    useAudioOutputHandle(player.output, \"audio-out\");\n    useBangInputHandle(time =>player.start(time.toSeconds()), \"player-start\");\n\n    const [loop, setLoop] = useData(false, \"loop\");\n    const [fpath, setFPath] = useData(\"808/Clap\", \"path\");\n\n    useEffect(() => player.set({loop}), [loop]);\n\n    const [playerReady, setPlayerReady] = useState(false);\n    useEffect(() => {\n        setPlayerReady(false);\n        const path = `sounds/drums/${fpath}.wav`; \n        player.load(path).then(() => setPlayerReady(true));\n    }, [fpath]);\n\n    useOnGlobalSchedulerStop(() => player.stop());\n    return <>\n    <Col style={{width: \"120px\"}}>\n        <Input onPressEnter={e => setFPath(e.target.value)} defaultValue={fpath} />\n    </Col>\n    <Checkbox onChange={(e) => setLoop(e.target.checked)} checked={loop}>Loop</Checkbox>\n    <Button onClick={() => player.start()} disabled={!playerReady}>Play</Button>\n    </>\n}","import { Button } from 'antd';\nimport { useState } from 'react';\nimport * as Tone from 'tone';\n\nexport const AudioOut = ({useAudioInputHandle}) => {\n    useAudioInputHandle(Tone.getDestination(), \"master-in\");\n    const [isOn, setOn] = useState(false);\n    return <Button onClick={() => {Tone.start(); setOn(true)}} type={isOn ? \"text\" : \"default\"}>🔊</Button>;\n}","import { AudioEdge } from \"../graph/edges\";\nimport { BangEdge } from \"../graph/edges\";\n\nexport const edgeTypes = {\n    audio: AudioEdge,\n    bang: BangEdge\n}","import { Button, Card, Col, Input, Row } from 'antd';\nimport Modal from 'antd/lib/modal/Modal';\nimport _ from 'lodash';\nimport { Component, createRef } from 'react';\nimport ReactFlow, { Background, Controls, MiniMap, ReactFlowProvider } from 'react-flow-renderer';\nimport { globalAudioGraph } from '../graph/audio';\nimport { globalBangGraph } from '../graph/bang';\nimport { AudioEdge, BangEdge } from '../graph/edges';\nimport { getAllNodesAsReactFlowElements, insideNodeContainer } from '../graph/nodeContainer';\n\nimport { nodeTypes } from './nodeTypes';\nimport { edgeTypes } from './edgeTypes';\n\n// Some default nodes, with default positions added to them\nconst defaultGraph = [\n  {\n    id: \"urbang\",\n    type: \"urbang\",\n    position: {\n        x: 100,\n        y: 100\n    },\n  },{\n    id: \"audioout\",\n    type: \"audioout\",\n    position: {\n        x: 300,\n        y: 300\n    }\n  }\n].map(el => ({...el, position: {...(el.position ?? {x: 100, y: 100})}}));\n\nexport class GraphView extends Component {\n    // key in localStorage in which the graph is stored\n    localStorageKey = \"graph\";\n\n    constructor(props){\n        super(props)\n        this.state = {\n            elements: props.elements,\n            addNodePopup: {\n                    position: {\n                        x: 0,\n                        y: 0\n                    },\n                    visible: false\n                }\n        }\n\n        this.reactFlowInstance = null;\n        this.audioGraph = globalAudioGraph;\n        this.bangGraph = globalBangGraph;\n\n        this.nodeTypes = _.mapValues(nodeTypes, node => insideNodeContainer(node));\n\n        this.edgeTypes = edgeTypes;\n\n    }\n\n    componentDidMount = () => {\n        this.loadGraph();\n        this.idCounter = this.idCounter ?? 0;\n    }\n\n    getUniqueId = () => {\n        return this.state.elements.length+1;\n    }\n\n    addElement = element => {\n        this.setState(state => ({elements: [...state.elements, element]}));\n    }\n\n    removeElement = element => {\n        this.setState(state => ({elements: _.reject(state.elements, {id: element.id})}));\n    }\n\n    addEdge = (params) => {\n        const {source, sourceHandle, target, targetHandle} = params;\n        const id = `edge(${source}//${sourceHandle} >> ${target}//${targetHandle})`;\n        this.addElement({...params, id});\n    }\n\n    findEdge = ({source, target}) => {\n        return this.state.elements.find(({source_, target_}) => source_ === source && target_ === target);\n    }\n\n    removeEdge = ({source, target}) => {\n        const edge = this.findEdge({source, target});\n        this.removeElement(edge);\n    }\n\n    addNode = ({type, position, data}) => {\n        const id = `n(${type}, )`\n        const setData = data => {\n            this.setNode(id, {data});\n        }\n        this.addElement({id, type, position, data: {...data, setData}});\n    }\n\n    findNode = id => {\n        return this.state.elements.find(({id_}) =>id_ === id);\n    }\n\n    setNode = (id, params) => {\n        const nodeOld = this.findNode(id);\n        this.removeNode(id);\n        this.addNode({id, ...nodeOld, ...params});\n    }\n\n    removeNode = ({id}) => {\n        const node = this.findNode(id);\n        this.removeElement(node);\n    }\n\n    onReactFlowLoad = (flow) => {\n        this.reactFlowInstance = flow;\n    }\n\n    getGraphAsReactFlowObject = () => {\n        // We collect \"data\" from Node, and node position from react flow-instance\n        const nodesWithData = getAllNodesAsReactFlowElements();\n        const nodesWithPosition = this.reactFlowInstance.getElements();\n\n        const findPosition = id => nodesWithPosition.find(n => n.id === id).position;\n        const findData = id => nodesWithData.find(n => n.id === id)?.data;\n        const nodesWithDataAndPosition = nodesWithPosition.map(n => ({...n,\n                                                        position: findPosition(n.id),\n                                                        data: findData(n.id)\n                                                    }));\n        return nodesWithDataAndPosition;\n    }\n\n    saveGraph = () => {\n        const elements = this.getGraphAsReactFlowObject();\n        localStorage.setItem(this.localStorageKey, JSON.stringify(elements));\n    }\n\n    loadGraph = () => {\n        const elements = JSON.parse(localStorage.getItem(this.localStorageKey)) ?? defaultGraph;\n        this.setState({elements});\n    }\n\n    clearSaved = () => {\n        localStorage.removeItem(this.localStorageKey);\n    }\n\n    addNodeOfType = (type, position={x:100, y:100}, data=undefined) => {\n        if(type in this.nodeTypes){\n            const id = `${type}(${this.getUniqueId()})`;\n            const newNode = {\n                id,\n                type,\n                position,\n                data\n            }\n\n            this.setState(state => ({elements: [...state.elements, newNode]}));\n        } else {\n            console.error(\"No node of type\", type);\n        }\n    }\n\n    onConnectHandles = (params) => {\n        const {sourceHandle, targetHandle} = params;\n        if(this.audioGraph.isAudioNode(sourceHandle) && this.audioGraph.isAudioNode(targetHandle)){\n            this.addEdge({...params, type: \"audio\"});\n        } else if (this.bangGraph.isBangNode(sourceHandle) && this.bangGraph.isBangNode(targetHandle)){\n            this.addEdge({...params, type: \"bang\"});\n        } else {\n            console.log(\"Can't connect handles \", sourceHandle, \"and\", targetHandle, \"of different types\");\n        }\n    }\n\n    onElementsRemove = elements => {\n        elements.forEach(element => {\n            if(\"source\" in element)\n                this.onEdgeRemove(element);\n            else\n                this.onNodeRemove(element);\n        })\n    }\n\n    onEdgeRemove = edge => {\n        this.removeElement(edge);\n    }\n\n    onNodeRemove = node => {\n        this.removeElement(node);\n    }\n\n    onPaneClick = (event) => {\n        if(true){\n            event.preventDefault();\n            event.stopPropagation();\n            console.log(event);\n            this.setState({\n                addNodePopup: {\n                    position: {\n                        x: event.pageX-20,\n                        y: event.pageY-25\n                    },\n                    visible: true\n                }\n            });\n        }\n    }\n\n    onDragOver = ev => {\n        ev.preventDefault();\n        ev.dataTransfer.dropEffect = \"move\";\n    }\n\n    onDrop = ev => {\n        ev.preventDefault();\n        // Copied from https://reactflow.dev/examples/drag-and-drop/\n        //const reactFlowBounds = this.reactFlowInstance.getBoundingClientRect();\n        const nodeData = JSON.parse(ev.dataTransfer.getData(\"app/audio-tool/preset-dnd\"));\n        const position = this.reactFlowInstance.project({\n            x: ev.clientX, // - reactFlowBounds.left,\n            y: ev.clientY, //- reactFlowBounds.top,\n            });\n\n        this.addNodeOfType(nodeData.type, position, nodeData.data);\n    }\n\n    render = () => {\n        return <Card style={{margin: 10}}>\n            <div style={{height: 900}}>\n                <Input.Group><Row gutter={5}>\n                <Col><Button onClick={() => this.saveGraph()}>Save</Button></Col>\n                <Col><Button onClick={() => this.clearSaved()}>Clear</Button></Col>\n                </Row></Input.Group>\n                <ReactFlowProvider>\n                    <ReactFlow\n                        elements={this.state.elements}\n                        nodeTypes={this.nodeTypes}\n                        edgeTypes={this.edgeTypes}\n                        onLoad={this.onReactFlowLoad}\n                        onConnect={this.onConnectHandles}\n                        deleteKeyCode={\"Delete\"}\n                        onElementsRemove={this.onElementsRemove}\n                        onDragOver={this.onDragOver}\n                        onDrop={this.onDrop}\n                        //onPaneContextMenu={this.onPaneContextMenu}\n                        onContextMenu={this.onPaneClick}>\n                        <Background variant=\"dots\" gap={24} size={0.5} />\n                        <MiniMap />\n                        <Controls />\n                    </ReactFlow>\n                </ReactFlowProvider>\n                {\n                this.state.addNodePopup.visible\n                ?    <div style={{\n                        left: this.state.addNodePopup.position.x + \"px\",\n                        top: this.state.addNodePopup.position.y + \"px\",\n                        position: \"absolute\"\n                    }}>\n                        <Input placeholder=\"Add new element...\"\n                                onPressEnter={e => {\n                                    this.addNodeOfType(e.target.value, this.state.addNodePopup.position);\n                                    e.target.blur();\n                                }}\n                                autoFocus\n                                onBlur={() => this.setState({addNodePopup: {visible: false}})} />\n                    </div> \n                : <></>\n                }\n                \n            </div>\n        </Card>\n    }\n}","\nlet presets = {\n    sampler: []\n}\n\n// Populate presets with samples\nconst collectedNames = ['Clap', 'Cow', 'Hihat1_closed', 'Hihat3_closed', 'Hihat_open', 'Kick', 'Snare', 'Snare3', 'Snare5', 'Clap2', 'Crash', 'Hihat2_closed', 'Hihat4_closed', 'Hihat_open_2', 'Kick2', 'Snare2', 'Snare4']\ncollectedNames.forEach(presetName =>\n    presets.sampler.push({name: `808 ${presetName}`, data: {loop: false, path: `808/${presetName}`}})\n)\n\nexport { presets }","\nimport { nodeTypes } from './nodeTypes';\nimport { insideNodeContainer } from '../graph/nodeContainer';\nimport { Card, Collapse, List } from 'antd';\nimport Title from 'antd/lib/skeleton/Title';\n\nimport { presets } from './presets';\n\nexport const PresetBrowser = (props) => {\n    return <Collapse style={{margin: 10}}>\n        {Object.keys(presets).map(\n            typeName => <Collapse.Panel header={typeName} key={typeName}>\n                <List size=\"small\"\n\n                    bordered\n                    dataSource={presets[typeName]}\n                    renderItem={item =>\n                        <List.Item\n                            key={item.name}\n                            draggable\n                            onDragStart={ev => {\n                                ev.dataTransfer.setData(\"app/audio-tool/preset-dnd\", JSON.stringify({type: typeName, data: item.data}));\n                                ev.dataTransfer.effectAllowed = \"move\";\n                                }}>\n                            {item.name}\n                        </List.Item>} />\n            </Collapse.Panel>\n        )}\n    </Collapse>\n}","import { Col, Layout, Row } from 'antd';\nimport { Content, Header } from 'antd/lib/layout/layout';\nimport Sider from 'antd/lib/layout/Sider';\nimport Title from 'antd/lib/skeleton/Title';\nimport Footer from 'rc-table/lib/Footer';\nimport { GraphView } from './views/GraphView';\nimport { PresetBrowser } from './views/presetBrowser';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return <Row>\n    <Col span={18}><GraphView /></Col>\n    <Col span={6}><PresetBrowser /></Col>\n  </Row>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}